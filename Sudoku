grid = [[0, 5, 0, 9, 0, 0, 0, 0, 0],
        [0, 0, 9, 0, 0, 0, 0, 3, 0],
        [0, 0, 0, 0, 1, 0, 0, 4, 0],
        [6, 0, 0, 0, 0, 0, 0, 0, 0],
        [8, 0, 0, 4, 0, 0, 0, 6, 0],
        [7, 0, 0, 5, 0, 0, 9, 2, 8],
        [9, 0, 6, 0, 3, 2, 1, 0, 0],
        [0, 2, 0, 0, 0, 5, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 4]]

sudoku = """
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          |   | 5 |   | 9 |   |   |   |   |   | 
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          |   |   | 9 |   |   |   |   | 3 |   | 
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          |   |   |   |   | 1 |   |   | 4 |   | 
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | 6 |   |   |   |   |   |   |   |   | 
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | 8 |   |   | 4 |   |   |   | 6 |   | 
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | 7 |   |   | 5 |   |   | 9 | 2 | 8 | 
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | 9 |   | 6 |   | 3 | 2 | 1 |   |   | 
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          |   | 2 |   |   |   | 5 |   |   |   |
           ___ ___ ___ ___ ___ ___ ___ ___ ___  
          |   |   |   |   |   |   |   |   | 4 |                   
          """

print(sudoku)


def possible(grid, row, column, number):

    # Is the number appearing in the given column?
    for rows in range(9):
        if number == grid[rows][column]:
            return False
            break
    # Is the number appearing in the given row?
    for columns in range(9):
        if number == grid[row][columns]:
            return False
            break
    # Is the number appearing in the given block?
    for i in range(3):
        for j in range(3):
            if grid[i+(row//3)*3][j+(column//3)*3] == number:
                return False

    return True


def solve(grid):
    for row in range(9):
        for column in range(9):
            if grid[row][column] == 0:
                for number in range(1, 10):
                    if possible(grid, row, column, number):
                        grid[row][column] = number
                        solve(grid)
                        grid[row][column] = 0

                return
    # print(grid)
    print(f"""
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | {grid[0][0]} | {grid[0][1]} | {grid[0][2]} | {grid[0][3]} | {grid[0][4]} | {grid[0][5]} | {grid[0][6]} | {grid[0][7]} | {grid[0][8]} | 
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | {grid[1][0]} | {grid[1][1]} | {grid[1][2]} | {grid[1][3]} | {grid[1][4]} | {grid[1][5]} | {grid[1][6]} | {grid[1][7]} | {grid[1][8]} |    
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | {grid[2][0]} | {grid[2][1]} | {grid[2][2]} | {grid[2][3]} | {grid[2][4]} | {grid[2][5]} | {grid[2][6]} | {grid[2][7]} | {grid[2][8]} | 
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | {grid[3][0]} | {grid[3][1]} | {grid[3][2]} | {grid[3][3]} | {grid[3][4]} | {grid[3][5]} | {grid[3][6]} | {grid[3][7]} | {grid[3][8]} |  
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | {grid[4][0]} | {grid[4][1]} | {grid[4][2]} | {grid[4][3]} | {grid[4][4]} | {grid[4][5]} | {grid[4][6]} | {grid[4][7]} | {grid[4][8]} | 
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | {grid[5][0]} | {grid[5][1]} | {grid[5][2]} | {grid[5][3]} | {grid[5][4]} | {grid[5][5]} | {grid[5][6]} | {grid[5][7]} | {grid[5][8]} |  
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | {grid[6][0]} | {grid[6][1]} | {grid[6][2]} | {grid[6][3]} | {grid[6][4]} | {grid[6][5]} | {grid[6][6]} | {grid[6][7]} | {grid[6][8]} | 
           ___ ___ ___ ___ ___ ___ ___ ___ ___
          | {grid[7][0]} | {grid[7][1]} | {grid[7][2]} | {grid[7][3]} | {grid[7][4]} | {grid[7][5]} | {grid[7][6]} | {grid[7][7]} | {grid[7][8]} |   
           ___ ___ ___ ___ ___ ___ ___ ___ ___  
          | {grid[8][0]} | {grid[8][1]} | {grid[8][2]} | {grid[8][3]} | {grid[8][4]} | {grid[8][5]} | {grid[8][6]} | {grid[8][7]} | {grid[8][8]} |   
          """)


solve(grid)
